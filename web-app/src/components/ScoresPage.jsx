import React, { useState, useEffect } from "react";
import { Box, Button, Table, TableBody, TableCell, TableHead, TableRow, TextField, Typography } from "@mui/material";
import { useParams } from "react-router-dom";
import { db } from "../firebase/firebase";
import { collection, getDocs, doc, updateDoc } from "firebase/firestore";

const ScoresPage = () => {
  const { cid, cno } = useParams(); 
  const [scores, setScores] = useState([]); 
  const [isSaving, setIsSaving] = useState(false); 

  // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchScores = async () => {
      const scoresRef = collection(db, `classroom/${cid}/checkin/${cno}/scores`);
      const scoresSnap = await getDocs(scoresRef);
      setScores(scoresSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    };

    fetchScores();
  }, [cid, cno]);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
  const handleChange = (event, id, field) => {
    const updatedScores = scores.map(score => {
      if (score.id === id) {
        return { ...score, [field]: event.target.value };
      }
      return score;
    });
    setScores(updatedScores);
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  const handleSaveChanges = async () => {
    setIsSaving(true);
    try {
      const batch = writeBatch(db);
      scores.forEach(score => {
        const scoreRef = doc(db, `classroom/${cid}/checkin/${cno}/scores`, score.id);
        batch.update(scoreRef, {
          score: score.score,
          note: score.note,
          status: score.status,
        });
      });
      await batch.commit();
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Box sx={{ padding: "70px" }}>
      <Typography variant="h4" gutterBottom>‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</Typography>
      
      {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
      <Table sx={{ marginTop: "20px" }}>
        <TableHead>
          <TableRow>
            <TableCell>‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableCell>
            <TableCell>‡∏£‡∏´‡∏±‡∏™</TableCell>
            <TableCell>‡∏ä‡∏∑‡πà‡∏≠</TableCell>
            <TableCell>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</TableCell>
            <TableCell>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</TableCell>
            <TableCell>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</TableCell>
            <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {scores.map((score, index) => (
            <TableRow key={score.id}>
              <TableCell>{index + 1}</TableCell>
              <TableCell>{score.stdid}</TableCell>
              <TableCell>{score.name}</TableCell>
              <TableCell>
                <TextField
                  value={score.note || ""}
                  onChange={(event) => handleChange(event, score.id, "note")}
                  variant="outlined"
                  size="small"
                  fullWidth
                />
              </TableCell>
              <TableCell>{score.date}</TableCell>
              <TableCell>
                <TextField
                  value={score.score || ""}
                  onChange={(event) => handleChange(event, score.id, "score")}
                  variant="outlined"
                  size="small"
                  fullWidth
                />
              </TableCell>
              <TableCell>
                <TextField
                  value={score.status || ""}
                  onChange={(event) => handleChange(event, score.id, "status")}
                  variant="outlined"
                  size="small"
                  fullWidth
                />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <Box sx={{ marginTop: "20px" }}>
        <Button variant="contained" color="primary" onClick={handleSaveChanges} disabled={isSaving}>
          {isSaving ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
        </Button>
      </Box>
    </Box>
  );
};

export default ScoresPage;
