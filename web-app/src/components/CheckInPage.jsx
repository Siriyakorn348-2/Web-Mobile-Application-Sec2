import { useState, useEffect } from "react";
import { Button, Table, TableBody, TableCell, TableHead, TableRow, Box, Typography, Paper } from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import { v4 as uuidv4 } from "uuid";
import { db } from "../firebase/firebase";
import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, getDocs, writeBatch } from "firebase/firestore";

const CheckInPage = () => {
  const { cid, cno } = useParams();
  console.log("CID:", cid);
  console.log("CNO:", cno); 

  const navigate = useNavigate();
  const [students, setStudents] = useState([]);
  const [checkInCode, setCheckInCode] = useState(""); 
  const [isCheckInOpen, setIsCheckInOpen] = useState(false);


  // üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchCheckInData = async () => {
      try {
        if (!db) {
          console.error("‚ùå Firestore ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!");
          return;
        }

        // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        const checkinRef = doc(db, `classroom/${cid}/checkin/${cno}`);
        const checkinSnap = await getDoc(checkinRef);

        if (checkinSnap.exists()) {
          setCheckInCode(checkinSnap.data().code);
          setIsCheckInOpen(checkinSnap.data().isOpen);
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ collection() ‡∏Å‡∏±‡∏ö db ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const studentsRef = collection(db, `classroom/${cid}/checkin/${cno}/students`);
        const studentsSnap = await getDocs(studentsRef);
        
        setStudents(studentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));
      } catch (error) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      }
    };

    fetchCheckInData();
    const interval = setInterval(fetchCheckInData, 5000); // ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    return () => clearInterval(interval);
  }, [cid, cno]);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ (‡∏™‡∏£‡πâ‡∏≤‡∏á Code ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Firestore)
  const handleOpenCheckIn = async () => {
    try {
      const generatedCode = uuidv4().slice(0, 6).toUpperCase(); 
      setCheckInCode(generatedCode);
      setIsCheckInOpen(true);

      // üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ Firestore ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!db) {
        console.error("‚ùå Firestore ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!");
        return;
      }

      // üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const checkinRef = doc(db, `classroom/${cid}/checkin/${cno}`);

      // üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
      await setDoc(checkinRef, {
        code: generatedCode,
        isOpen: true,
        createdAt: new Date().toISOString(),
      });

      console.log(`‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${generatedCode}`);
      alert(`‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏´‡∏±‡∏™: ${generatedCode}`);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠!");
    }
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
  const handleCloseCheckIn = async () => {
    try {
      setIsCheckInOpen(false);
      setCheckInCode("");

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Firestore
      await updateDoc(doc(db, `classroom/${cid}/checkin/${cno}`), {
        isOpen: false,
      });

      alert("‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("‚ùå ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const handleDelete = async (studentID) => {
    try {
      await deleteDoc(doc(db, `classroom/${cid}/checkin/${cno}/students/${studentID}`));
      setStudents(students.filter((s) => s.id !== studentID));
    } catch (error) {
      console.error("‚ùå ‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà /scores
  const handleSaveCheckIn = async () => {
    try {
      const studentsRef = collection(db, `classroom/${cid}/checkin/${cno}/students`);
      const studentsSnap = await getDocs(studentsRef);
  
      const batch = writeBatch(db); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô batch
  
      studentsSnap.forEach((docSnapshot) => {
        const studentData = docSnapshot.data(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ doc() ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const studentDocRef = doc(db, `classroom/${cid}/checkin/${cno}/scores`, docSnapshot.id);
        batch.set(studentDocRef, {
          ...studentData,
          status: 1, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡πÄ‡∏õ‡πá‡∏ô 1
        });
      });
  
      await batch.commit(); // ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô batch
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠:", error);
      alert(`‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    }
  };
  
  


  const handleGoBack = () => {
    navigate(-1); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  };

  return (
    <Box sx={{ padding: "70px" }}>
      <Typography variant="h4" gutterBottom>‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</Typography>

    

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ */}
      <Box sx={{ display: "flex", gap: 2, marginBottom: 2 }}>
        <Button variant="contained" color="primary" onClick={handleOpenCheckIn} disabled={isCheckInOpen}>
          ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        </Button>
        <Button variant="contained" color="secondary" onClick={handleCloseCheckIn} disabled={!isCheckInOpen}>
          ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        </Button>
      </Box>

      {/* üîπ ‡πÅ‡∏™‡∏î‡∏á Code ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
      {isCheckInOpen && (
        <Paper sx={{ padding: 3, backgroundColor: "#f0f0f0", textAlign: "center", marginBottom: 2 }}>
          <Typography variant="h6">üîë ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</Typography>
          <Typography variant="h3" sx={{ fontWeight: "bold", color: "#d32f2f" }}>{checkInCode}</Typography>
        </Paper>
      )}

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ */}
      <Box sx={{ display: "flex", gap: 2, marginBottom: 2 }}>
        <Button variant="contained" color="success" onClick={handleSaveCheckIn}>
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
        </Button>
        <Button variant="outlined">‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏ß‡∏¥‡∏ä‡∏≤</Button>
        <Button variant="outlined" onClick={() => navigate(`/classroom/${cid}/checkin/${cno}/qna`)}> ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö</Button>
        <Button variant="outlined" onClick={() => navigate(`/classroom/${cid}/checkin/${cno}/scores`)}> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</Button>

      </Box>

      {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß */}
      <Table sx={{ marginTop: "20px" }}>
        <TableHead>
          <TableRow>
            <TableCell>‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableCell>
            <TableCell>‡∏£‡∏´‡∏±‡∏™</TableCell>
            <TableCell>‡∏ä‡∏∑‡πà‡∏≠</TableCell>
            <TableCell>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</TableCell>
            <TableCell>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</TableCell>
            <TableCell>‡∏•‡∏ö</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {students.map((student, index) => (
            <TableRow key={student.id}>
              <TableCell>{index + 1}</TableCell>
              <TableCell>{student.stdid}</TableCell>
              <TableCell>{student.name}</TableCell>
              <TableCell>{student.remark || "-"}</TableCell>
              <TableCell>{student.date}</TableCell>
              <TableCell>
                <Button color="error" onClick={() => handleDelete(student.id)}>‡∏•‡∏ö</Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
        {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö */}
        <Button variant="contained" color="secondary" onClick={handleGoBack} sx={{ marginBottom: "20px",marginTop:"20px" }}>
        ‡∏Å‡∏•‡∏±‡∏ö
      </Button>
    </Box>
  );
};

export default CheckInPage;
