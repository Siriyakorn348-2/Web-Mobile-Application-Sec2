import React, { useState, useEffect } from "react";
import { getFirestore, doc, setDoc, deleteDoc, updateDoc, collection, onSnapshot } from "firebase/firestore";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Firebase Storage
import { useParams } from "react-router-dom";

const StudentList = () => {
  const { cid } = useParams();  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ cid ‡∏à‡∏≤‡∏Å URL params
  const [students, setStudents] = useState([]);
  const [newStudent, setNewStudent] = useState({ id: "", name: "", image: "", status: "" });
  const [editStudent, setEditStudent] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false); // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pop-up
  const [imageFile, setImageFile] = useState(null); // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  useEffect(() => {
    const db = getFirestore();
    const studentRef = collection(db, "classroom", cid, "students");

    const unsubscribe = onSnapshot(studentRef, (snapshot) => {
      const studentList = snapshot.docs.map(doc => ({
        key: doc.id,
        ...doc.data(),
      }));
      setStudents(studentList);
    });

    return () => unsubscribe();  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å component
  }, [cid]);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
  const uploadImage = async (file) => {
    const storage = getStorage();
    const imageRef = ref(storage, `students/${cid}/${file.name}`);
    try {
      await uploadBytes(imageRef, file);
      const downloadURL = await getDownloadURL(imageRef);
      return downloadURL;  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    } catch (error) {
      console.error("Error uploading image:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û");
      return null;
    }
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  const handleAddStudent = async () => {
    if (!cid) return alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
    if (!newStudent.stdid || !newStudent.name || newStudent.status === "") {
      return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™, ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
    }
  
    // üìå ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û, ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
    let imageUrl = newStudent.image;
    if (imageFile) {
      imageUrl = await uploadImage(imageFile);
      if (!imageUrl) return; // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    }
  
    const db = getFirestore();
    const studentRef = doc(db, "classroom", cid, "students", newStudent.stdid); // ‡πÉ‡∏ä‡πâ stdid ‡πÄ‡∏õ‡πá‡∏ô key
  
    await setDoc(studentRef, { 
      stdid: newStudent.stdid,
      name: newStudent.name,
      status: newStudent.status, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô number
      image: imageUrl || "",
    })
      .then(() => {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        setNewStudent({ stdid: "", name: "", image: "", status: "" }); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ newStudent ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
        setIsPopupOpen(false);
        setImageFile(null);  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
      })
      .catch((error) => alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message));
  };
  

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  const handleDeleteStudent = (key) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    const db = getFirestore();
    const studentRef = doc(db, "classroom", cid, "students", key);

    deleteDoc(studentRef)
      .then(() => alert("‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"))
      .catch((error) => alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message));
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  const handleEditStudent = async () => {
    if (!editStudent || !editStudent.key) return;

    const db = getFirestore();
    const studentRef = doc(db, "classroom", cid, "students", editStudent.key);

    // üìå ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û, ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
    let imageUrl = editStudent.image;
    if (imageFile) {
      imageUrl = await uploadImage(imageFile);
      if (!imageUrl) return; // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    await updateDoc(studentRef, { ...editStudent, image: imageUrl })
      .then(() => {
        alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        setEditStudent(null);
        setImageFile(null);  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
      })
      .catch((error) => alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message));
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", alignItems: "center", paddingTop: "70px", fontFamily: "Arial, sans-serif", backgroundColor: "#f9f5ff", minHeight: "100vh" }}>
      <h2 style={{ color: "#6a5acd", marginBottom: "20px" }}>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h2>

      

      <table style={{ width: "80%", margin: "20px auto", borderCollapse: "collapse", backgroundColor: "white", boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)", borderRadius: "10px", textAlign: "center" }}>
        <thead>
          <tr style={{ backgroundColor: "#6a5acd", color: "white" }}>
            <th style={{ padding: "12px" }}>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
            <th style={{ padding: "12px" }}>‡∏£‡∏´‡∏±‡∏™</th>
            <th style={{ padding: "12px" }}>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th style={{ padding: "12px" }}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
            <th style={{ padding: "12px" }}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th style={{ padding: "12px" }}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student, index) => (
            <tr key={student.key} style={{ borderBottom: "1px solid #ddd", backgroundColor: index % 2 === 0 ? "#f3e5ff" : "white" }}>
              <td style={{ padding: "12px" }}>{index + 1}</td>
              <td style={{ padding: "12px" }}>{student.stdid || "-"}</td>
              <td style={{ padding: "12px" }}>{student.name || "-"}</td>
              <td style={{ padding: "12px" }}>
                {student.image ? <img src={student.image} alt="‡∏£‡∏π‡∏õ" style={{ width: "50px", height: "50px", borderRadius: "50%", objectFit: "cover" }} /> : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ"}
              </td>
              <td style={{ padding: "12px" }}>{student.status || "-"}</td>
              <td>
                <button onClick={() => handleDeleteStudent(student.key)} style={{ marginBottom: "20px", backgroundColor: "#6a5acd", color: "white", padding: "10px", border: "none", borderRadius: "5px", cursor: "pointer", fontSize: "16px" }}>‡∏•‡∏ö</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pop-up ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
      {isPopupOpen && (
        <div style={{ position: "fixed", top: 0, left: 0, width: "100%", height: "100%", backgroundColor: "rgba(0,0,0,0.3)", display: "flex", alignItems: "center", justifyContent: "center" }}>
          <div style={{ backgroundColor: "white", padding: "40px", borderRadius: "15px", width: "450px", textAlign: "center", boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)" }}>
            <h2 style={{ marginBottom: "20px", color: "#6a5acd" }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h2>
            <input type="text" placeholder="‡∏£‡∏´‡∏±‡∏™" value={newStudent.id} onChange={(e) => setNewStudent({ ...newStudent, id: e.target.value })} style={{ width: "100%", padding: "12px", marginBottom: "15px", borderRadius: "5px", border: "1px solid #ddd" }} />
            <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠" value={newStudent.name} onChange={(e) => setNewStudent({ ...newStudent, name: e.target.value })} style={{ width: "100%", padding: "12px", marginBottom: "15px", borderRadius: "5px", border: "1px solid #ddd" }} />
            
            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <input type="file" accept="image/*" onChange={(e) => setImageFile(e.target.files[0])} style={{ width: "100%", padding: "12px", marginBottom: "15px", borderRadius: "5px", border: "1px solid #ddd" }} />

            <input type="text" placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" value={newStudent.status} onChange={(e) => setNewStudent({ ...newStudent, status: e.target.value })} style={{ width: "100%", padding: "12px", marginBottom: "20px", borderRadius: "5px", border: "1px solid #ddd" }} />
            <button onClick={handleAddStudent} style={{ marginRight: "15px", backgroundColor: "#6a5acd", color: "white", padding: "12px 25px", border: "none", borderRadius: "5px", cursor: "pointer", fontSize: "16px" }}>‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
            <button onClick={() => setIsPopupOpen(false)} style={{ backgroundColor: "#f44336", color: "white", padding: "12px 25px", border: "none", borderRadius: "5px", cursor: "pointer", fontSize: "16px" }}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default StudentList;
